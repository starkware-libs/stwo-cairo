use core::box::BoxImpl;
use stwo_constraint_framework::{
    LookupElementsImpl, PreprocessedColumn, PreprocessedColumnImpl, PreprocessedColumnKey,
    PreprocessedMaskValuesImpl,
};
use stwo_verifier_core::Hash;
// IMPORTANT: This function must exactly match the output and ordering of the prover preprocessed
// trace declaration. If the function changes, this array must be updated to stay in sync.
// https://github.com/starkware-libs/stwo-cairo/blame/175026d/stwo_cairo_prover/crates/cairo-air/src/preprocessed.rs#L42
#[cairofmt::skip]
#[cfg(not(feature: "poseidon252_verifier"))]
pub const PREPROCESSED_COLUMNS: [PreprocessedColumn; 163] = [
    PreprocessedColumn::Seq(25),
    PreprocessedColumn::Seq(24),
    PreprocessedColumn::Seq(23),
    PreprocessedColumn::PedersenPoints(0),
    PreprocessedColumn::PedersenPoints(1),
    PreprocessedColumn::PedersenPoints(2),
    PreprocessedColumn::PedersenPoints(3),
    PreprocessedColumn::PedersenPoints(4),
    PreprocessedColumn::PedersenPoints(5),
    PreprocessedColumn::PedersenPoints(6),
    PreprocessedColumn::PedersenPoints(7),
    PreprocessedColumn::PedersenPoints(8),
    PreprocessedColumn::PedersenPoints(9),
    PreprocessedColumn::PedersenPoints(10),
    PreprocessedColumn::PedersenPoints(11),
    PreprocessedColumn::PedersenPoints(12),
    PreprocessedColumn::PedersenPoints(13),
    PreprocessedColumn::PedersenPoints(14),
    PreprocessedColumn::PedersenPoints(15),
    PreprocessedColumn::PedersenPoints(16),
    PreprocessedColumn::PedersenPoints(17),
    PreprocessedColumn::PedersenPoints(18),
    PreprocessedColumn::PedersenPoints(19),
    PreprocessedColumn::PedersenPoints(20),
    PreprocessedColumn::PedersenPoints(21),
    PreprocessedColumn::PedersenPoints(22),
    PreprocessedColumn::PedersenPoints(23),
    PreprocessedColumn::PedersenPoints(24),
    PreprocessedColumn::PedersenPoints(25),
    PreprocessedColumn::PedersenPoints(26),
    PreprocessedColumn::PedersenPoints(27),
    PreprocessedColumn::PedersenPoints(28),
    PreprocessedColumn::PedersenPoints(29),
    PreprocessedColumn::PedersenPoints(30),
    PreprocessedColumn::PedersenPoints(31),
    PreprocessedColumn::PedersenPoints(32),
    PreprocessedColumn::PedersenPoints(33),
    PreprocessedColumn::PedersenPoints(34),
    PreprocessedColumn::PedersenPoints(35),
    PreprocessedColumn::PedersenPoints(36),
    PreprocessedColumn::PedersenPoints(37),
    PreprocessedColumn::PedersenPoints(38),
    PreprocessedColumn::PedersenPoints(39),
    PreprocessedColumn::PedersenPoints(40),
    PreprocessedColumn::PedersenPoints(41),
    PreprocessedColumn::PedersenPoints(42),
    PreprocessedColumn::PedersenPoints(43),
    PreprocessedColumn::PedersenPoints(44),
    PreprocessedColumn::PedersenPoints(45),
    PreprocessedColumn::PedersenPoints(46),
    PreprocessedColumn::PedersenPoints(47),
    PreprocessedColumn::PedersenPoints(48),
    PreprocessedColumn::PedersenPoints(49),
    PreprocessedColumn::PedersenPoints(50),
    PreprocessedColumn::PedersenPoints(51),
    PreprocessedColumn::PedersenPoints(52),
    PreprocessedColumn::PedersenPoints(53),
    PreprocessedColumn::PedersenPoints(54),
    PreprocessedColumn::PedersenPoints(55),
    PreprocessedColumn::Seq(22),
    PreprocessedColumn::Seq(21),
    PreprocessedColumn::Seq(20),
    PreprocessedColumn::BitwiseXor((10, 0)),
    PreprocessedColumn::BitwiseXor((10, 1)),
    PreprocessedColumn::BitwiseXor((10, 2)),
    PreprocessedColumn::Seq(19),
    PreprocessedColumn::Seq(18),
    PreprocessedColumn::BitwiseXor((9, 0)),
    PreprocessedColumn::BitwiseXor((9, 1)),
    PreprocessedColumn::BitwiseXor((9, 2)),
    PreprocessedColumn::RangeCheck2(([9, 9], 0)),
    PreprocessedColumn::RangeCheck2(([9, 9], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 0)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 2)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 3)),
    PreprocessedColumn::Seq(17),
    PreprocessedColumn::Seq(16),
    PreprocessedColumn::BitwiseXor((8, 0)),
    PreprocessedColumn::BitwiseXor((8, 1)),
    PreprocessedColumn::BitwiseXor((8, 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 0)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 1)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 3)),
    PreprocessedColumn::Seq(15),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 0)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 1)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 2)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 3)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 4)),
    PreprocessedColumn::Seq(14),
    PreprocessedColumn::BitwiseXor((7, 0)),
    PreprocessedColumn::BitwiseXor((7, 1)),
    PreprocessedColumn::BitwiseXor((7, 2)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 0)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 1)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 2)),
    PreprocessedColumn::Seq(13),
    PreprocessedColumn::Seq(12),
    PreprocessedColumn::Seq(11),
    PreprocessedColumn::Seq(10),
    PreprocessedColumn::Seq(9),
    PreprocessedColumn::RangeCheck2(([5, 4], 0)),
    PreprocessedColumn::RangeCheck2(([5, 4], 1)),
    PreprocessedColumn::Seq(8),
    PreprocessedColumn::BitwiseXor((4, 0)),
    PreprocessedColumn::BitwiseXor((4, 1)),
    PreprocessedColumn::BitwiseXor((4, 2)),
    PreprocessedColumn::RangeCheck2(([4, 4], 0)),
    PreprocessedColumn::RangeCheck2(([4, 4], 1)),
    PreprocessedColumn::Seq(7),
    PreprocessedColumn::RangeCheck2(([4, 3], 0)),
    PreprocessedColumn::RangeCheck2(([4, 3], 1)),
    PreprocessedColumn::Seq(6),
    PreprocessedColumn::PoseidonRoundKeys(0),
    PreprocessedColumn::PoseidonRoundKeys(1),
    PreprocessedColumn::PoseidonRoundKeys(2),
    PreprocessedColumn::PoseidonRoundKeys(3),
    PreprocessedColumn::PoseidonRoundKeys(4),
    PreprocessedColumn::PoseidonRoundKeys(5),
    PreprocessedColumn::PoseidonRoundKeys(6),
    PreprocessedColumn::PoseidonRoundKeys(7),
    PreprocessedColumn::PoseidonRoundKeys(8),
    PreprocessedColumn::PoseidonRoundKeys(9),
    PreprocessedColumn::PoseidonRoundKeys(10),
    PreprocessedColumn::PoseidonRoundKeys(11),
    PreprocessedColumn::PoseidonRoundKeys(12),
    PreprocessedColumn::PoseidonRoundKeys(13),
    PreprocessedColumn::PoseidonRoundKeys(14),
    PreprocessedColumn::PoseidonRoundKeys(15),
    PreprocessedColumn::PoseidonRoundKeys(16),
    PreprocessedColumn::PoseidonRoundKeys(17),
    PreprocessedColumn::PoseidonRoundKeys(18),
    PreprocessedColumn::PoseidonRoundKeys(19),
    PreprocessedColumn::PoseidonRoundKeys(20),
    PreprocessedColumn::PoseidonRoundKeys(21),
    PreprocessedColumn::PoseidonRoundKeys(22),
    PreprocessedColumn::PoseidonRoundKeys(23),
    PreprocessedColumn::PoseidonRoundKeys(24),
    PreprocessedColumn::PoseidonRoundKeys(25),
    PreprocessedColumn::PoseidonRoundKeys(26),
    PreprocessedColumn::PoseidonRoundKeys(27),
    PreprocessedColumn::PoseidonRoundKeys(28),
    PreprocessedColumn::PoseidonRoundKeys(29),
    PreprocessedColumn::Seq(5),
    PreprocessedColumn::Seq(4),
    PreprocessedColumn::BlakeSigma(0),
    PreprocessedColumn::BlakeSigma(1),
    PreprocessedColumn::BlakeSigma(2),
    PreprocessedColumn::BlakeSigma(3),
    PreprocessedColumn::BlakeSigma(4),
    PreprocessedColumn::BlakeSigma(5),
    PreprocessedColumn::BlakeSigma(6),
    PreprocessedColumn::BlakeSigma(7),
    PreprocessedColumn::BlakeSigma(8),
    PreprocessedColumn::BlakeSigma(9),
    PreprocessedColumn::BlakeSigma(10),
    PreprocessedColumn::BlakeSigma(11),
    PreprocessedColumn::BlakeSigma(12),
    PreprocessedColumn::BlakeSigma(13),
    PreprocessedColumn::BlakeSigma(14),
    PreprocessedColumn::BlakeSigma(15)
];
// IMPORTANT: This function must exactly match the output and ordering of the prover preprocessed
// trace declaration. If the function changes, this array must be updated to stay in sync.
// https://github.com/starkware-libs/stwo-cairo/blame/175026d/stwo_cairo_prover/crates/cairo-air/src/preprocessed.rs#L42
#[cairofmt::skip]
#[cfg(feature: "poseidon252_verifier")]
pub const PREPROCESSED_COLUMNS: [PreprocessedColumn; 107] = [
    PreprocessedColumn::Seq(25),
    PreprocessedColumn::Seq(24),
    PreprocessedColumn::Seq(23),
    PreprocessedColumn::Seq(22),
    PreprocessedColumn::Seq(21),
    PreprocessedColumn::Seq(20),
    PreprocessedColumn::BitwiseXor((10, 0)),
    PreprocessedColumn::BitwiseXor((10, 1)),
    PreprocessedColumn::BitwiseXor((10, 2)),
    PreprocessedColumn::Seq(19),
    PreprocessedColumn::Seq(18),
    PreprocessedColumn::BitwiseXor((9, 0)),
    PreprocessedColumn::BitwiseXor((9, 1)),
    PreprocessedColumn::BitwiseXor((9, 2)),
    PreprocessedColumn::RangeCheck2(([9, 9], 0)),
    PreprocessedColumn::RangeCheck2(([9, 9], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 0)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 2)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 3)),
    PreprocessedColumn::Seq(17),
    PreprocessedColumn::Seq(16),
    PreprocessedColumn::BitwiseXor((8, 0)),
    PreprocessedColumn::BitwiseXor((8, 1)),
    PreprocessedColumn::BitwiseXor((8, 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 0)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 1)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 3)),
    PreprocessedColumn::Seq(15),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 0)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 1)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 2)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 3)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 4)),
    PreprocessedColumn::Seq(14),
    PreprocessedColumn::BitwiseXor((7, 0)),
    PreprocessedColumn::BitwiseXor((7, 1)),
    PreprocessedColumn::BitwiseXor((7, 2)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 0)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 1)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 2)),
    PreprocessedColumn::Seq(13),
    PreprocessedColumn::Seq(12),
    PreprocessedColumn::Seq(11),
    PreprocessedColumn::Seq(10),
    PreprocessedColumn::Seq(9),
    PreprocessedColumn::RangeCheck2(([5, 4], 0)),
    PreprocessedColumn::RangeCheck2(([5, 4], 1)),
    PreprocessedColumn::Seq(8),
    PreprocessedColumn::BitwiseXor((4, 0)),
    PreprocessedColumn::BitwiseXor((4, 1)),
    PreprocessedColumn::BitwiseXor((4, 2)),
    PreprocessedColumn::RangeCheck2(([4, 4], 0)),
    PreprocessedColumn::RangeCheck2(([4, 4], 1)),
    PreprocessedColumn::Seq(7),
    PreprocessedColumn::RangeCheck2(([4, 3], 0)),
    PreprocessedColumn::RangeCheck2(([4, 3], 1)),
    PreprocessedColumn::Seq(6),
    PreprocessedColumn::PoseidonRoundKeys(0),
    PreprocessedColumn::PoseidonRoundKeys(1),
    PreprocessedColumn::PoseidonRoundKeys(2),
    PreprocessedColumn::PoseidonRoundKeys(3),
    PreprocessedColumn::PoseidonRoundKeys(4),
    PreprocessedColumn::PoseidonRoundKeys(5),
    PreprocessedColumn::PoseidonRoundKeys(6),
    PreprocessedColumn::PoseidonRoundKeys(7),
    PreprocessedColumn::PoseidonRoundKeys(8),
    PreprocessedColumn::PoseidonRoundKeys(9),
    PreprocessedColumn::PoseidonRoundKeys(10),
    PreprocessedColumn::PoseidonRoundKeys(11),
    PreprocessedColumn::PoseidonRoundKeys(12),
    PreprocessedColumn::PoseidonRoundKeys(13),
    PreprocessedColumn::PoseidonRoundKeys(14),
    PreprocessedColumn::PoseidonRoundKeys(15),
    PreprocessedColumn::PoseidonRoundKeys(16),
    PreprocessedColumn::PoseidonRoundKeys(17),
    PreprocessedColumn::PoseidonRoundKeys(18),
    PreprocessedColumn::PoseidonRoundKeys(19),
    PreprocessedColumn::PoseidonRoundKeys(20),
    PreprocessedColumn::PoseidonRoundKeys(21),
    PreprocessedColumn::PoseidonRoundKeys(22),
    PreprocessedColumn::PoseidonRoundKeys(23),
    PreprocessedColumn::PoseidonRoundKeys(24),
    PreprocessedColumn::PoseidonRoundKeys(25),
    PreprocessedColumn::PoseidonRoundKeys(26),
    PreprocessedColumn::PoseidonRoundKeys(27),
    PreprocessedColumn::PoseidonRoundKeys(28),
    PreprocessedColumn::PoseidonRoundKeys(29),
    PreprocessedColumn::Seq(5),
    PreprocessedColumn::Seq(4),
    PreprocessedColumn::BlakeSigma(0),
    PreprocessedColumn::BlakeSigma(1),
    PreprocessedColumn::BlakeSigma(2),
    PreprocessedColumn::BlakeSigma(3),
    PreprocessedColumn::BlakeSigma(4),
    PreprocessedColumn::BlakeSigma(5),
    PreprocessedColumn::BlakeSigma(6),
    PreprocessedColumn::BlakeSigma(7),
    PreprocessedColumn::BlakeSigma(8),
    PreprocessedColumn::BlakeSigma(9),
    PreprocessedColumn::BlakeSigma(10),
    PreprocessedColumn::BlakeSigma(11),
    PreprocessedColumn::BlakeSigma(12),
    PreprocessedColumn::BlakeSigma(13),
    PreprocessedColumn::BlakeSigma(14),
    PreprocessedColumn::BlakeSigma(15)
];


/// Returns PreProcessedTrace::canonical root for the given blowup factor.
#[cfg(not(feature: "poseidon252_verifier"))]
pub fn preprocessed_root(log_blowup_factor: u32) -> Hash {
    match log_blowup_factor - 1 {
        0 => Hash {
            hash: BoxImpl::new(
                [
                    0x2dfd14ec, 0x7c48b36c, 0x4f5dae20, 0x17a6a4f0, 0x4e22f1d4, 0x78b9e538,
                    0x9663ec6e, 0x44897b38,
                ],
            ),
        },
        1 => Hash {
            hash: BoxImpl::new(
                [
                    0x9863e682, 0x05b66874, 0xf593e42b, 0x4664128b, 0x1862908a, 0x3591e696,
                    0x72e6f558, 0x57666308,
                ],
            ),
        },
        2 => Hash {
            hash: BoxImpl::new(
                [
                    0xffdf2d46, 0xf44eb263, 0x9fc5d93f, 0xb09a4636, 0x2625c85a, 0x99829bae,
                    0x95a17f33, 0x3ef3a82a,
                ],
            ),
        },
        3 => Hash {
            hash: BoxImpl::new(
                [
                    0x353a220f, 0xc20b3627, 0xbb2d9cf6, 0xc9d11911, 0x4ad93a63, 0x57e6f3d0,
                    0x31fc9cc0, 0x7de243e1,
                ],
            ),
        },
        4 => Hash {
            hash: BoxImpl::new(
                [
                    0x8786d5c9, 0x8b3d39c5, 0x9edd39ec, 0x0bf4e5c4, 0x6f12e698, 0x9066713e,
                    0x3437d8fc, 0x3acb8ebe,
                ],
            ),
        },
        _ => panic!("invalid blowup factor"),
    }
}

/// Returns PreProcessedTrace::canonical_without_pedersen root for the given blowup factor.
#[cfg(feature: "poseidon252_verifier")]
pub fn preprocessed_root(log_blowup_factor: u32) -> Hash {
    match log_blowup_factor - 1 {
        0 => 0x29c5f6e13459cfe5f189b6ff5b9d9da1de7c781dec033772673cb41a647c719,
        1 => 0x68a80becb400ab6d6b49e2e65bf88f1819eab888f3b664203c7de6be2db1d35,
        2 => 0xee62e9ae477f02e3c90017f4cafb07f072218bffcff4a8d7ab3e2805778ea8,
        3 => 0x1658485ba36b85580fe2f79c5b2a755503fcf55e19e81567fc7d5405616423f,
        4 => 0x40012feeab5b2d2eb7588681987838792e44f34b4ed2db755ec4fbe47795a1c,
        _ => panic!("invalid blowup factor"),
    }
}
