use stwo_constraint_framework::Sha256SigmaType;
use core::box::BoxImpl;
use stwo_constraint_framework::{
    LookupElementsImpl, PreprocessedColumn, PreprocessedColumnImpl, PreprocessedColumnKey,
    PreprocessedMaskValuesImpl,
};
use stwo_verifier_core::Hash;
// IMPORTANT: This function must exactly match the output and ordering of the prover preprocessed
// trace declaration. If the function changes, this array must be updated to stay in sync.
// https://github.com/starkware-libs/stwo-cairo/blame/175026d/stwo_cairo_prover/crates/cairo-air/src/preprocessed.rs#L42
#[cairofmt::skip]
#[cfg(not(feature: "poseidon252_verifier"))]
pub const PREPROCESSED_COLUMNS: [PreprocessedColumn; 205] = [
    PreprocessedColumn::Seq(25),
    PreprocessedColumn::Seq(24),
    PreprocessedColumn::Seq(23),
    PreprocessedColumn::PedersenPoints(0),
    PreprocessedColumn::PedersenPoints(1),
    PreprocessedColumn::PedersenPoints(2),
    PreprocessedColumn::PedersenPoints(3),
    PreprocessedColumn::PedersenPoints(4),
    PreprocessedColumn::PedersenPoints(5),
    PreprocessedColumn::PedersenPoints(6),
    PreprocessedColumn::PedersenPoints(7),
    PreprocessedColumn::PedersenPoints(8),
    PreprocessedColumn::PedersenPoints(9),
    PreprocessedColumn::PedersenPoints(10),
    PreprocessedColumn::PedersenPoints(11),
    PreprocessedColumn::PedersenPoints(12),
    PreprocessedColumn::PedersenPoints(13),
    PreprocessedColumn::PedersenPoints(14),
    PreprocessedColumn::PedersenPoints(15),
    PreprocessedColumn::PedersenPoints(16),
    PreprocessedColumn::PedersenPoints(17),
    PreprocessedColumn::PedersenPoints(18),
    PreprocessedColumn::PedersenPoints(19),
    PreprocessedColumn::PedersenPoints(20),
    PreprocessedColumn::PedersenPoints(21),
    PreprocessedColumn::PedersenPoints(22),
    PreprocessedColumn::PedersenPoints(23),
    PreprocessedColumn::PedersenPoints(24),
    PreprocessedColumn::PedersenPoints(25),
    PreprocessedColumn::PedersenPoints(26),
    PreprocessedColumn::PedersenPoints(27),
    PreprocessedColumn::PedersenPoints(28),
    PreprocessedColumn::PedersenPoints(29),
    PreprocessedColumn::PedersenPoints(30),
    PreprocessedColumn::PedersenPoints(31),
    PreprocessedColumn::PedersenPoints(32),
    PreprocessedColumn::PedersenPoints(33),
    PreprocessedColumn::PedersenPoints(34),
    PreprocessedColumn::PedersenPoints(35),
    PreprocessedColumn::PedersenPoints(36),
    PreprocessedColumn::PedersenPoints(37),
    PreprocessedColumn::PedersenPoints(38),
    PreprocessedColumn::PedersenPoints(39),
    PreprocessedColumn::PedersenPoints(40),
    PreprocessedColumn::PedersenPoints(41),
    PreprocessedColumn::PedersenPoints(42),
    PreprocessedColumn::PedersenPoints(43),
    PreprocessedColumn::PedersenPoints(44),
    PreprocessedColumn::PedersenPoints(45),
    PreprocessedColumn::PedersenPoints(46),
    PreprocessedColumn::PedersenPoints(47),
    PreprocessedColumn::PedersenPoints(48),
    PreprocessedColumn::PedersenPoints(49),
    PreprocessedColumn::PedersenPoints(50),
    PreprocessedColumn::PedersenPoints(51),
    PreprocessedColumn::PedersenPoints(52),
    PreprocessedColumn::PedersenPoints(53),
    PreprocessedColumn::PedersenPoints(54),
    PreprocessedColumn::PedersenPoints(55),
    PreprocessedColumn::Seq(22),
    PreprocessedColumn::Seq(21),
    PreprocessedColumn::Seq(20),
    PreprocessedColumn::BitwiseXor((10, 0)),
    PreprocessedColumn::BitwiseXor((10, 1)),
    PreprocessedColumn::BitwiseXor((10, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 5)),
    PreprocessedColumn::Seq(19),
    PreprocessedColumn::Seq(18),
    PreprocessedColumn::BitwiseXor((9, 0)),
    PreprocessedColumn::BitwiseXor((9, 1)),
    PreprocessedColumn::BitwiseXor((9, 2)),
    PreprocessedColumn::RangeCheck2(([9, 9], 0)),
    PreprocessedColumn::RangeCheck2(([9, 9], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 0)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 2)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 3)),
    PreprocessedColumn::Seq(17),
    PreprocessedColumn::Seq(16),
    PreprocessedColumn::BitwiseXor((8, 0)),
    PreprocessedColumn::BitwiseXor((8, 1)),
    PreprocessedColumn::BitwiseXor((8, 2)),
    PreprocessedColumn::BitwiseAnd((8, 0)),
    PreprocessedColumn::BitwiseAnd((8, 1)),
    PreprocessedColumn::BitwiseAnd((8, 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 0)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 1)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 5)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 5)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 5)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 5)),
    PreprocessedColumn::Seq(15),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 0)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 1)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 2)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 3)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 4)),
    PreprocessedColumn::Seq(14),
    PreprocessedColumn::BitwiseXor((7, 0)),
    PreprocessedColumn::BitwiseXor((7, 1)),
    PreprocessedColumn::BitwiseXor((7, 2)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 0)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 1)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 2)),
    PreprocessedColumn::Seq(13),
    PreprocessedColumn::Seq(12),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 5)),
    PreprocessedColumn::Seq(11),
    PreprocessedColumn::Seq(10),
    PreprocessedColumn::Seq(9),
    PreprocessedColumn::RangeCheck2(([5, 4], 0)),
    PreprocessedColumn::RangeCheck2(([5, 4], 1)),
    PreprocessedColumn::Seq(8),
    PreprocessedColumn::BitwiseXor((4, 0)),
    PreprocessedColumn::BitwiseXor((4, 1)),
    PreprocessedColumn::BitwiseXor((4, 2)),
    PreprocessedColumn::RangeCheck2(([4, 4], 0)),
    PreprocessedColumn::RangeCheck2(([4, 4], 1)),
    PreprocessedColumn::Seq(7),
    PreprocessedColumn::RangeCheck2(([4, 3], 0)),
    PreprocessedColumn::RangeCheck2(([4, 3], 1)),
    PreprocessedColumn::Seq(6),
    PreprocessedColumn::PoseidonRoundKeys(0),
    PreprocessedColumn::PoseidonRoundKeys(1),
    PreprocessedColumn::PoseidonRoundKeys(2),
    PreprocessedColumn::PoseidonRoundKeys(3),
    PreprocessedColumn::PoseidonRoundKeys(4),
    PreprocessedColumn::PoseidonRoundKeys(5),
    PreprocessedColumn::PoseidonRoundKeys(6),
    PreprocessedColumn::PoseidonRoundKeys(7),
    PreprocessedColumn::PoseidonRoundKeys(8),
    PreprocessedColumn::PoseidonRoundKeys(9),
    PreprocessedColumn::PoseidonRoundKeys(10),
    PreprocessedColumn::PoseidonRoundKeys(11),
    PreprocessedColumn::PoseidonRoundKeys(12),
    PreprocessedColumn::PoseidonRoundKeys(13),
    PreprocessedColumn::PoseidonRoundKeys(14),
    PreprocessedColumn::PoseidonRoundKeys(15),
    PreprocessedColumn::PoseidonRoundKeys(16),
    PreprocessedColumn::PoseidonRoundKeys(17),
    PreprocessedColumn::PoseidonRoundKeys(18),
    PreprocessedColumn::PoseidonRoundKeys(19),
    PreprocessedColumn::PoseidonRoundKeys(20),
    PreprocessedColumn::PoseidonRoundKeys(21),
    PreprocessedColumn::PoseidonRoundKeys(22),
    PreprocessedColumn::PoseidonRoundKeys(23),
    PreprocessedColumn::PoseidonRoundKeys(24),
    PreprocessedColumn::PoseidonRoundKeys(25),
    PreprocessedColumn::PoseidonRoundKeys(26),
    PreprocessedColumn::PoseidonRoundKeys(27),
    PreprocessedColumn::PoseidonRoundKeys(28),
    PreprocessedColumn::PoseidonRoundKeys(29),
    PreprocessedColumn::Sha256K(0),
    PreprocessedColumn::Sha256K(1),
    PreprocessedColumn::Seq(5),
    PreprocessedColumn::Seq(4),
    PreprocessedColumn::RangeCheck1(([2], 0)),
    PreprocessedColumn::BlakeSigma(0),
    PreprocessedColumn::BlakeSigma(1),
    PreprocessedColumn::BlakeSigma(2),
    PreprocessedColumn::BlakeSigma(3),
    PreprocessedColumn::BlakeSigma(4),
    PreprocessedColumn::BlakeSigma(5),
    PreprocessedColumn::BlakeSigma(6),
    PreprocessedColumn::BlakeSigma(7),
    PreprocessedColumn::BlakeSigma(8),
    PreprocessedColumn::BlakeSigma(9),
    PreprocessedColumn::BlakeSigma(10),
    PreprocessedColumn::BlakeSigma(11),
    PreprocessedColumn::BlakeSigma(12),
    PreprocessedColumn::BlakeSigma(13),
    PreprocessedColumn::BlakeSigma(14),
    PreprocessedColumn::BlakeSigma(15)
];
// IMPORTANT: This function must exactly match the output and ordering of the prover preprocessed
// trace declaration. If the function changes, this array must be updated to stay in sync.
// https://github.com/starkware-libs/stwo-cairo/blame/175026d/stwo_cairo_prover/crates/cairo-air/src/preprocessed.rs#L42
#[cairofmt::skip]
#[cfg(feature: "poseidon252_verifier")]
pub const PREPROCESSED_COLUMNS: [PreprocessedColumn; 107] = [
    PreprocessedColumn::Seq(25),
    PreprocessedColumn::Seq(24),
    PreprocessedColumn::Seq(23),
    PreprocessedColumn::Seq(22),
    PreprocessedColumn::Seq(21),
    PreprocessedColumn::Seq(20),
    PreprocessedColumn::BitwiseXor((10, 0)),
    PreprocessedColumn::BitwiseXor((10, 1)),
    PreprocessedColumn::BitwiseXor((10, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O1, 5)),
    PreprocessedColumn::Seq(19),
    PreprocessedColumn::Seq(18),
    PreprocessedColumn::BitwiseXor((9, 0)),
    PreprocessedColumn::BitwiseXor((9, 1)),
    PreprocessedColumn::BitwiseXor((9, 2)),
    PreprocessedColumn::RangeCheck2(([9, 9], 0)),
    PreprocessedColumn::RangeCheck2(([9, 9], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 0)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 2)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 3)),
    PreprocessedColumn::Seq(17),
    PreprocessedColumn::Seq(16),
    PreprocessedColumn::BitwiseXor((8, 0)),
    PreprocessedColumn::BitwiseXor((8, 1)),
    PreprocessedColumn::BitwiseXor((8, 2)),
    PreprocessedColumn::BitwiseAnd((8, 0)),
    PreprocessedColumn::BitwiseAnd((8, 1)),
    PreprocessedColumn::BitwiseAnd((8, 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 0)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 1)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O0, 5)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma0O1, 5)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O0, 5)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::BigSigma1O1, 5)),
    PreprocessedColumn::Seq(15),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 0)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 1)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 2)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 3)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 4)),
    PreprocessedColumn::Seq(14),
    PreprocessedColumn::BitwiseXor((7, 0)),
    PreprocessedColumn::BitwiseXor((7, 1)),
    PreprocessedColumn::BitwiseXor((7, 2)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 0)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 1)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 2)),
    PreprocessedColumn::Seq(13),
    PreprocessedColumn::Seq(12),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 0)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 1)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 2)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 3)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 4)),
    PreprocessedColumn::Sha256SigmaTable((Sha256SigmaType::SmallSigma1O0, 5)),
    PreprocessedColumn::Seq(11),
    PreprocessedColumn::Seq(10),
    PreprocessedColumn::Seq(9),
    PreprocessedColumn::RangeCheck2(([5, 4], 0)),
    PreprocessedColumn::RangeCheck2(([5, 4], 1)),
    PreprocessedColumn::Seq(8),
    PreprocessedColumn::BitwiseXor((4, 0)),
    PreprocessedColumn::BitwiseXor((4, 1)),
    PreprocessedColumn::BitwiseXor((4, 2)),
    PreprocessedColumn::RangeCheck2(([4, 4], 0)),
    PreprocessedColumn::RangeCheck2(([4, 4], 1)),
    PreprocessedColumn::Seq(7),
    PreprocessedColumn::RangeCheck2(([4, 3], 0)),
    PreprocessedColumn::RangeCheck2(([4, 3], 1)),
    PreprocessedColumn::Seq(6),
    PreprocessedColumn::PoseidonRoundKeys(0),
    PreprocessedColumn::PoseidonRoundKeys(1),
    PreprocessedColumn::PoseidonRoundKeys(2),
    PreprocessedColumn::PoseidonRoundKeys(3),
    PreprocessedColumn::PoseidonRoundKeys(4),
    PreprocessedColumn::PoseidonRoundKeys(5),
    PreprocessedColumn::PoseidonRoundKeys(6),
    PreprocessedColumn::PoseidonRoundKeys(7),
    PreprocessedColumn::PoseidonRoundKeys(8),
    PreprocessedColumn::PoseidonRoundKeys(9),
    PreprocessedColumn::PoseidonRoundKeys(10),
    PreprocessedColumn::PoseidonRoundKeys(11),
    PreprocessedColumn::PoseidonRoundKeys(12),
    PreprocessedColumn::PoseidonRoundKeys(13),
    PreprocessedColumn::PoseidonRoundKeys(14),
    PreprocessedColumn::PoseidonRoundKeys(15),
    PreprocessedColumn::PoseidonRoundKeys(16),
    PreprocessedColumn::PoseidonRoundKeys(17),
    PreprocessedColumn::PoseidonRoundKeys(18),
    PreprocessedColumn::PoseidonRoundKeys(19),
    PreprocessedColumn::PoseidonRoundKeys(20),
    PreprocessedColumn::PoseidonRoundKeys(21),
    PreprocessedColumn::PoseidonRoundKeys(22),
    PreprocessedColumn::PoseidonRoundKeys(23),
    PreprocessedColumn::PoseidonRoundKeys(24),
    PreprocessedColumn::PoseidonRoundKeys(25),
    PreprocessedColumn::PoseidonRoundKeys(26),
    PreprocessedColumn::PoseidonRoundKeys(27),
    PreprocessedColumn::PoseidonRoundKeys(28),
    PreprocessedColumn::PoseidonRoundKeys(29),
    PreprocessedColumn::Sha256K(0),
    PreprocessedColumn::Sha256K(1),
    PreprocessedColumn::Seq(5),
    PreprocessedColumn::Seq(4),
    PreprocessedColumn::RangeCheck1(([2], 0)),
    PreprocessedColumn::BlakeSigma(0),
    PreprocessedColumn::BlakeSigma(1),
    PreprocessedColumn::BlakeSigma(2),
    PreprocessedColumn::BlakeSigma(3),
    PreprocessedColumn::BlakeSigma(4),
    PreprocessedColumn::BlakeSigma(5),
    PreprocessedColumn::BlakeSigma(6),
    PreprocessedColumn::BlakeSigma(7),
    PreprocessedColumn::BlakeSigma(8),
    PreprocessedColumn::BlakeSigma(9),
    PreprocessedColumn::BlakeSigma(10),
    PreprocessedColumn::BlakeSigma(11),
    PreprocessedColumn::BlakeSigma(12),
    PreprocessedColumn::BlakeSigma(13),
    PreprocessedColumn::BlakeSigma(14),
    PreprocessedColumn::BlakeSigma(15)
];


/// Returns PreProcessedTrace::canonical root for the given blowup factor.
#[cfg(not(feature: "poseidon252_verifier"))]
pub fn preprocessed_root(log_blowup_factor: u32) -> Hash {
    match log_blowup_factor - 1 {
        0 => Hash {
            hash: BoxImpl::new(
                [
                    0x14944662, 0x267d434d, 0x05d32fd8, 0xb4d388ad, 0xd32bbbe4, 0x74048557, 0x7233be5e, 0x41baabc9
                ],
            ),
        },
        1 => Hash {
            hash: BoxImpl::new(
                [
                    0x66891113, 0x12739252, 0x9c6ca755, 0x01cd8045, 0xb055251b, 0x075979e3, 0x6bdc12dc, 0x037677a6
                ],
            ),
        },
        2 => Hash {
            hash: BoxImpl::new(
                [
                    0x87098c3b, 0xefe18c1c, 0xc8708f51, 0x7fdae3e6, 0xd03b9fe9, 0xcb5ad0af, 0x6edb7ed1, 0x22fe3052
                ],
            ),
        },
        3 => Hash {
            // TODO: update that
            hash: BoxImpl::new(
                [
                    0x87098c3b, 0xefe18c1c, 0xc8708f51, 0x7fdae3e6, 0xd03b9fe9, 0xcb5ad0af, 0x6edb7ed1, 0x22fe3052
                ],
            ),
        },
        // TODO: update that
        4 => Hash {
            hash: BoxImpl::new(
                [
                    0x8786d5c9, 0x8b3d39c5, 0x9edd39ec, 0x0bf4e5c4, 0x6f12e698, 0x9066713e,
                    0x3437d8fc, 0x3acb8ebe,
                ],
            ),
        },
        _ => panic!("invalid blowup factor"),
    }
}

/// Returns PreProcessedTrace::canonical_without_pedersen root for the given blowup factor.
#[cfg(feature: "poseidon252_verifier")]
pub fn preprocessed_root(log_blowup_factor: u32) -> Hash {
    match log_blowup_factor - 1 {
        0 => 0x1e4d273e41f78f2b04ce2f5150cc7ffb5f7737b7314d15962296d396cb3c4c49,
        1 => 0xe422c4f5b2859d8db4709ecd7b3210f31ac9bcf725b54a12929a3e2b09981c68,
        2 => 0x14b2d62bbd217807ef2d3ee832f3edcd9ea446f30e1ef47e1d711249d3004cdd,
        3 => 0x42f891eba0321f3cafebcad660e0cd2e9142c99a457a4fc4c5927ef46433e2b3,
        4 => 0x40012feeab5b2d2eb7588681987838792e44f34b4ed2db755ec4fbe47795a1c,
        _ => panic!("invalid blowup factor"),
    }
}
