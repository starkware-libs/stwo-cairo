use core::box::BoxImpl;
use stwo_constraint_framework::{
    LookupElements, LookupElementsImpl, PreprocessedColumn, PreprocessedColumnImpl,
    PreprocessedColumnKey, PreprocessedColumnSet, PreprocessedColumnTrait, PreprocessedMaskValues,
    PreprocessedMaskValuesImpl,
};
use stwo_verifier_core::Hash;
// IMPORTANT: This function must exactly match the output and ordering of the prover preprocessed
// trace declaration. If the function changes, this array must be updated to stay in sync.
// https://github.com/starkware-libs/stwo-cairo/blame/175026d/stwo_cairo_prover/crates/cairo-air/src/preprocessed.rs#L42
#[cairofmt::skip]
#[cfg(not(feature: "poseidon252_verifier"))]
pub const PREPROCESSED_COLUMNS: [PreprocessedColumn; 162] = [
    PreprocessedColumn::Seq(24),
    PreprocessedColumn::Seq(23),
    PreprocessedColumn::PedersenPoints(0),
    PreprocessedColumn::PedersenPoints(1),
    PreprocessedColumn::PedersenPoints(2),
    PreprocessedColumn::PedersenPoints(3),
    PreprocessedColumn::PedersenPoints(4),
    PreprocessedColumn::PedersenPoints(5),
    PreprocessedColumn::PedersenPoints(6),
    PreprocessedColumn::PedersenPoints(7),
    PreprocessedColumn::PedersenPoints(8),
    PreprocessedColumn::PedersenPoints(9),
    PreprocessedColumn::PedersenPoints(10),
    PreprocessedColumn::PedersenPoints(11),
    PreprocessedColumn::PedersenPoints(12),
    PreprocessedColumn::PedersenPoints(13),
    PreprocessedColumn::PedersenPoints(14),
    PreprocessedColumn::PedersenPoints(15),
    PreprocessedColumn::PedersenPoints(16),
    PreprocessedColumn::PedersenPoints(17),
    PreprocessedColumn::PedersenPoints(18),
    PreprocessedColumn::PedersenPoints(19),
    PreprocessedColumn::PedersenPoints(20),
    PreprocessedColumn::PedersenPoints(21),
    PreprocessedColumn::PedersenPoints(22),
    PreprocessedColumn::PedersenPoints(23),
    PreprocessedColumn::PedersenPoints(24),
    PreprocessedColumn::PedersenPoints(25),
    PreprocessedColumn::PedersenPoints(26),
    PreprocessedColumn::PedersenPoints(27),
    PreprocessedColumn::PedersenPoints(28),
    PreprocessedColumn::PedersenPoints(29),
    PreprocessedColumn::PedersenPoints(30),
    PreprocessedColumn::PedersenPoints(31),
    PreprocessedColumn::PedersenPoints(32),
    PreprocessedColumn::PedersenPoints(33),
    PreprocessedColumn::PedersenPoints(34),
    PreprocessedColumn::PedersenPoints(35),
    PreprocessedColumn::PedersenPoints(36),
    PreprocessedColumn::PedersenPoints(37),
    PreprocessedColumn::PedersenPoints(38),
    PreprocessedColumn::PedersenPoints(39),
    PreprocessedColumn::PedersenPoints(40),
    PreprocessedColumn::PedersenPoints(41),
    PreprocessedColumn::PedersenPoints(42),
    PreprocessedColumn::PedersenPoints(43),
    PreprocessedColumn::PedersenPoints(44),
    PreprocessedColumn::PedersenPoints(45),
    PreprocessedColumn::PedersenPoints(46),
    PreprocessedColumn::PedersenPoints(47),
    PreprocessedColumn::PedersenPoints(48),
    PreprocessedColumn::PedersenPoints(49),
    PreprocessedColumn::PedersenPoints(50),
    PreprocessedColumn::PedersenPoints(51),
    PreprocessedColumn::PedersenPoints(52),
    PreprocessedColumn::PedersenPoints(53),
    PreprocessedColumn::PedersenPoints(54),
    PreprocessedColumn::PedersenPoints(55),
    PreprocessedColumn::Seq(22),
    PreprocessedColumn::Seq(21),
    PreprocessedColumn::Seq(20),
    PreprocessedColumn::BitwiseXor((10, 0)),
    PreprocessedColumn::BitwiseXor((10, 1)),
    PreprocessedColumn::BitwiseXor((10, 2)),
    PreprocessedColumn::Seq(19),
    PreprocessedColumn::Seq(18),
    PreprocessedColumn::BitwiseXor((9, 0)),
    PreprocessedColumn::BitwiseXor((9, 1)),
    PreprocessedColumn::BitwiseXor((9, 2)),
    PreprocessedColumn::RangeCheck2(([9, 9], 0)),
    PreprocessedColumn::RangeCheck2(([9, 9], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 0)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 2)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 3)),
    PreprocessedColumn::Seq(17),
    PreprocessedColumn::Seq(16),
    PreprocessedColumn::BitwiseXor((8, 0)),
    PreprocessedColumn::BitwiseXor((8, 1)),
    PreprocessedColumn::BitwiseXor((8, 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 0)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 1)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 3)),
    PreprocessedColumn::Seq(15),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 0)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 1)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 2)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 3)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 4)),
    PreprocessedColumn::Seq(14),
    PreprocessedColumn::BitwiseXor((7, 0)),
    PreprocessedColumn::BitwiseXor((7, 1)),
    PreprocessedColumn::BitwiseXor((7, 2)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 0)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 1)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 2)),
    PreprocessedColumn::Seq(13),
    PreprocessedColumn::Seq(12),
    PreprocessedColumn::Seq(11),
    PreprocessedColumn::Seq(10),
    PreprocessedColumn::Seq(9),
    PreprocessedColumn::RangeCheck2(([5, 4], 0)),
    PreprocessedColumn::RangeCheck2(([5, 4], 1)),
    PreprocessedColumn::Seq(8),
    PreprocessedColumn::BitwiseXor((4, 0)),
    PreprocessedColumn::BitwiseXor((4, 1)),
    PreprocessedColumn::BitwiseXor((4, 2)),
    PreprocessedColumn::RangeCheck2(([4, 4], 0)),
    PreprocessedColumn::RangeCheck2(([4, 4], 1)),
    PreprocessedColumn::Seq(7),
    PreprocessedColumn::RangeCheck2(([4, 3], 0)),
    PreprocessedColumn::RangeCheck2(([4, 3], 1)),
    PreprocessedColumn::Seq(6),
    PreprocessedColumn::PoseidonRoundKeys(0),
    PreprocessedColumn::PoseidonRoundKeys(1),
    PreprocessedColumn::PoseidonRoundKeys(2),
    PreprocessedColumn::PoseidonRoundKeys(3),
    PreprocessedColumn::PoseidonRoundKeys(4),
    PreprocessedColumn::PoseidonRoundKeys(5),
    PreprocessedColumn::PoseidonRoundKeys(6),
    PreprocessedColumn::PoseidonRoundKeys(7),
    PreprocessedColumn::PoseidonRoundKeys(8),
    PreprocessedColumn::PoseidonRoundKeys(9),
    PreprocessedColumn::PoseidonRoundKeys(10),
    PreprocessedColumn::PoseidonRoundKeys(11),
    PreprocessedColumn::PoseidonRoundKeys(12),
    PreprocessedColumn::PoseidonRoundKeys(13),
    PreprocessedColumn::PoseidonRoundKeys(14),
    PreprocessedColumn::PoseidonRoundKeys(15),
    PreprocessedColumn::PoseidonRoundKeys(16),
    PreprocessedColumn::PoseidonRoundKeys(17),
    PreprocessedColumn::PoseidonRoundKeys(18),
    PreprocessedColumn::PoseidonRoundKeys(19),
    PreprocessedColumn::PoseidonRoundKeys(20),
    PreprocessedColumn::PoseidonRoundKeys(21),
    PreprocessedColumn::PoseidonRoundKeys(22),
    PreprocessedColumn::PoseidonRoundKeys(23),
    PreprocessedColumn::PoseidonRoundKeys(24),
    PreprocessedColumn::PoseidonRoundKeys(25),
    PreprocessedColumn::PoseidonRoundKeys(26),
    PreprocessedColumn::PoseidonRoundKeys(27),
    PreprocessedColumn::PoseidonRoundKeys(28),
    PreprocessedColumn::PoseidonRoundKeys(29),
    PreprocessedColumn::Seq(5),
    PreprocessedColumn::Seq(4),
    PreprocessedColumn::BlakeSigma(0),
    PreprocessedColumn::BlakeSigma(1),
    PreprocessedColumn::BlakeSigma(2),
    PreprocessedColumn::BlakeSigma(3),
    PreprocessedColumn::BlakeSigma(4),
    PreprocessedColumn::BlakeSigma(5),
    PreprocessedColumn::BlakeSigma(6),
    PreprocessedColumn::BlakeSigma(7),
    PreprocessedColumn::BlakeSigma(8),
    PreprocessedColumn::BlakeSigma(9),
    PreprocessedColumn::BlakeSigma(10),
    PreprocessedColumn::BlakeSigma(11),
    PreprocessedColumn::BlakeSigma(12),
    PreprocessedColumn::BlakeSigma(13),
    PreprocessedColumn::BlakeSigma(14),
    PreprocessedColumn::BlakeSigma(15)
];
// IMPORTANT: This function must exactly match the output and ordering of the prover preprocessed
// trace declaration. If the function changes, this array must be updated to stay in sync.
// https://github.com/starkware-libs/stwo-cairo/blame/175026d/stwo_cairo_prover/crates/cairo-air/src/preprocessed.rs#L42
#[cairofmt::skip]
#[cfg(feature: "poseidon252_verifier")]
pub const PREPROCESSED_COLUMNS: [PreprocessedColumn; 106] = [
    PreprocessedColumn::Seq(24),
    PreprocessedColumn::Seq(23),
    PreprocessedColumn::Seq(22),
    PreprocessedColumn::Seq(21),
    PreprocessedColumn::Seq(20),
    PreprocessedColumn::BitwiseXor((10, 0)),
    PreprocessedColumn::BitwiseXor((10, 1)),
    PreprocessedColumn::BitwiseXor((10, 2)),
    PreprocessedColumn::Seq(19),
    PreprocessedColumn::Seq(18),
    PreprocessedColumn::BitwiseXor((9, 0)),
    PreprocessedColumn::BitwiseXor((9, 1)),
    PreprocessedColumn::BitwiseXor((9, 2)),
    PreprocessedColumn::RangeCheck2(([9, 9], 0)),
    PreprocessedColumn::RangeCheck2(([9, 9], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 0)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 1)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 2)),
    PreprocessedColumn::RangeCheck4(([3, 6, 6, 3], 3)),
    PreprocessedColumn::Seq(17),
    PreprocessedColumn::Seq(16),
    PreprocessedColumn::BitwiseXor((8, 0)),
    PreprocessedColumn::BitwiseXor((8, 1)),
    PreprocessedColumn::BitwiseXor((8, 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 0)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 1)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 2)),
    PreprocessedColumn::RangeCheck4(([4, 4, 4, 4], 3)),
    PreprocessedColumn::Seq(15),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 0)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 1)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 2)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 3)),
    PreprocessedColumn::RangeCheck5(([3, 3, 3, 3, 3], 4)),
    PreprocessedColumn::Seq(14),
    PreprocessedColumn::BitwiseXor((7, 0)),
    PreprocessedColumn::BitwiseXor((7, 1)),
    PreprocessedColumn::BitwiseXor((7, 2)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 0)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 1)),
    PreprocessedColumn::RangeCheck3(([7, 2, 5], 2)),
    PreprocessedColumn::Seq(13),
    PreprocessedColumn::Seq(12),
    PreprocessedColumn::Seq(11),
    PreprocessedColumn::Seq(10),
    PreprocessedColumn::Seq(9),
    PreprocessedColumn::RangeCheck2(([5, 4], 0)),
    PreprocessedColumn::RangeCheck2(([5, 4], 1)),
    PreprocessedColumn::Seq(8),
    PreprocessedColumn::BitwiseXor((4, 0)),
    PreprocessedColumn::BitwiseXor((4, 1)),
    PreprocessedColumn::BitwiseXor((4, 2)),
    PreprocessedColumn::RangeCheck2(([4, 4], 0)),
    PreprocessedColumn::RangeCheck2(([4, 4], 1)),
    PreprocessedColumn::Seq(7),
    PreprocessedColumn::RangeCheck2(([4, 3], 0)),
    PreprocessedColumn::RangeCheck2(([4, 3], 1)),
    PreprocessedColumn::Seq(6),
    PreprocessedColumn::PoseidonRoundKeys(0),
    PreprocessedColumn::PoseidonRoundKeys(1),
    PreprocessedColumn::PoseidonRoundKeys(2),
    PreprocessedColumn::PoseidonRoundKeys(3),
    PreprocessedColumn::PoseidonRoundKeys(4),
    PreprocessedColumn::PoseidonRoundKeys(5),
    PreprocessedColumn::PoseidonRoundKeys(6),
    PreprocessedColumn::PoseidonRoundKeys(7),
    PreprocessedColumn::PoseidonRoundKeys(8),
    PreprocessedColumn::PoseidonRoundKeys(9),
    PreprocessedColumn::PoseidonRoundKeys(10),
    PreprocessedColumn::PoseidonRoundKeys(11),
    PreprocessedColumn::PoseidonRoundKeys(12),
    PreprocessedColumn::PoseidonRoundKeys(13),
    PreprocessedColumn::PoseidonRoundKeys(14),
    PreprocessedColumn::PoseidonRoundKeys(15),
    PreprocessedColumn::PoseidonRoundKeys(16),
    PreprocessedColumn::PoseidonRoundKeys(17),
    PreprocessedColumn::PoseidonRoundKeys(18),
    PreprocessedColumn::PoseidonRoundKeys(19),
    PreprocessedColumn::PoseidonRoundKeys(20),
    PreprocessedColumn::PoseidonRoundKeys(21),
    PreprocessedColumn::PoseidonRoundKeys(22),
    PreprocessedColumn::PoseidonRoundKeys(23),
    PreprocessedColumn::PoseidonRoundKeys(24),
    PreprocessedColumn::PoseidonRoundKeys(25),
    PreprocessedColumn::PoseidonRoundKeys(26),
    PreprocessedColumn::PoseidonRoundKeys(27),
    PreprocessedColumn::PoseidonRoundKeys(28),
    PreprocessedColumn::PoseidonRoundKeys(29),
    PreprocessedColumn::Seq(5),
    PreprocessedColumn::Seq(4),
    PreprocessedColumn::BlakeSigma(0),
    PreprocessedColumn::BlakeSigma(1),
    PreprocessedColumn::BlakeSigma(2),
    PreprocessedColumn::BlakeSigma(3),
    PreprocessedColumn::BlakeSigma(4),
    PreprocessedColumn::BlakeSigma(5),
    PreprocessedColumn::BlakeSigma(6),
    PreprocessedColumn::BlakeSigma(7),
    PreprocessedColumn::BlakeSigma(8),
    PreprocessedColumn::BlakeSigma(9),
    PreprocessedColumn::BlakeSigma(10),
    PreprocessedColumn::BlakeSigma(11),
    PreprocessedColumn::BlakeSigma(12),
    PreprocessedColumn::BlakeSigma(13),
    PreprocessedColumn::BlakeSigma(14),
    PreprocessedColumn::BlakeSigma(15)
];


/// Returns PreProcessedTrace::canonical root for the given blowup factor.
#[cfg(not(feature: "poseidon252_verifier"))]
pub fn preprocessed_root(log_blowup_factor: u32) -> Hash {
    match log_blowup_factor - 1 {
        0 => Hash {
            hash: BoxImpl::new(
                [
                    0x8a2202ef, 0x477c9959, 0x79655388, 0x958a3409, 0x87ec09fd, 0x7034f8ab,
                    0x1e720385, 0x70f00ad4,
                ],
            ),
        },
        1 => Hash {
            hash: BoxImpl::new(
                [
                    0x1966f0a8, 0xa0059272, 0x9eca2f06, 0x82791af7, 0x9a2c1522, 0x2fbdff33,
                    0x5553d795, 0x3fc5a18a,
                ],
            ),
        },
        2 => Hash {
            hash: BoxImpl::new(
                [
                    0x1d553a98, 0x78da025b, 0x87686d83, 0xce0aa49a, 0x9c5752d8, 0xc3954c47,
                    0xc80ca41a, 0xc757f720,
                ],
            ),
        },
        3 => Hash {
            hash: BoxImpl::new(
                [
                    0x6bd0149a, 0x786401f3, 0x98edb866, 0x53b8113b, 0xa18ef714, 0x155b1183,
                    0x19d8fff5, 0x9e792495,
                ],
            ),
        },
        4 => Hash {
            hash: BoxImpl::new(
                [
                    0x1bfe4fde, 0xeddf6d4b, 0x2bf346c4, 0x8332fe5f, 0x43ce2525, 0x55611509,
                    0xe13c2956, 0x66aeb325,
                ],
            ),
        },
        _ => panic!("invalid blowup factor"),
    }
}

/// Returns PreProcessedTrace::canonical_without_pedersen root for the given blowup factor.
#[cfg(feature: "poseidon252_verifier")]
pub fn preprocessed_root(log_blowup_factor: u32) -> Hash {
    match log_blowup_factor - 1 {
        0 => 0x37135f0785b40da84b4edd5b92e532f9b96908f9d5222705e99e1ab51f0874e,
        1 => 0x301e3e86d4f2ea10c5e1ab1ceec1a7ac3bba33838d185f886ec86fea3596394,
        2 => 0x672b4c8a40b5da0bbe4220e2b3dbd7ffdf8a600a1d57c14749fe6da382ed543,
        3 => 0x265cf99e281e42f542299815419ba8d4e61ff2fb31b67a1b0fd0915c69ec81d,
        4 => 0x41e2af383bb39edc612dc626595df2bfc433bdfa9aeddf63b5ded918793cea9,
        _ => panic!("invalid blowup factor"),
    }
}
